(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{416:function(t,a,s){"use strict";s.r(a);var e=s(56),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1-2-的幂-231"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-的幂-231"}},[t._v("#")]),t._v(" 1. 2 的幂[231]")]),t._v(" "),s("h2",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给你一个整数 "),s("code",[t._v("n")]),t._v("，请你判断该整数是否是 "),s("code",[t._v("2")]),t._v(" 的幂次方。如果是，返回 "),s("code",[t._v("true")]),t._v(" ；否则，返回 "),s("code",[t._v("false")]),t._v(" 。")]),t._v(" "),s("p",[t._v("如果存在一个整数 "),s("code",[t._v("x")]),t._v(" 使得 n ==  x"),s("sup",[t._v("2")]),t._v(" ，则认为 "),s("code",[t._v("n")]),t._v(" 是 2 的幂次方。")]),t._v(" "),s("p",[t._v("示例 1:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：n = 1\n输出：true\n解释：2^0 = 1\n")])])]),s("p",[t._v("示例 2:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：n = 16\n输出：true\n解释：2^4 = 16\n")])])]),s("p",[t._v("示例 3:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：n = 3\n输出：false\n")])])]),s("h2",{attrs:{id:"二进制表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制表示"}},[t._v("#")]),t._v(" 二进制表示")]),t._v(" "),s("p",[t._v("2"),s("sup",[t._v("n")]),t._v("的二进制具有以下特点：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("2"),s("sup",[t._v("n")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("二进制")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("n - 1的二进制")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("-n的二进制")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2"),s("sup",[t._v("0")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0001")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1111")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2"),s("sup",[t._v("1")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0010")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0001")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1110")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2"),s("sup",[t._v("2")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0100")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0011")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1100")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2"),s("sup",[t._v("3")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0111")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1000")])])])]),t._v(" "),s("p",[t._v("因此可以看出，2的幂计算 "),s("code",[t._v("n & (n - 1)")]),t._v(" 无相同位，结果为必然为0；计算 "),s("code",[t._v("n & -n")]),t._v(" 结果必然等于自身。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isPowerOfTwo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isPowerOfTwo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"判断是否为最大数的约数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断是否为最大数的约数"}},[t._v("#")]),t._v(" 判断是否为最大数的约数")]),t._v(" "),s("p",[t._v("题目给定的的范围中， "),s("code",[t._v("n")]),t._v(" 最大为 2"),s("sup",[t._v("30")]),t._v(" ，因此我们只需要判断 "),s("code",[t._v("n")]),t._v(" 是否是这个最大数的 "),s("strong",[t._v("约数")]),t._v(" 即可。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isPowerOfTwo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BIG")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BIG")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);